

window.geoSelect = {
  selectFieldOrder: ["geo-countries", "geo-states", "geo-regions", "geo-cities"],

  wipeData: function (geonameObj) {
    return [geonameObj["name"], geonameObj["geonameId"]];
  },

  childDisabler: function (element, callerValue) {
    var disabled = element.options.length < 2;
    var indexOfSelect = this.selectFieldOrder.indexOf(element.getAttribute('class'));
    var disableFlag = false;
    for (var i = indexOfSelect; i < this.selectFieldOrder.length; i++){
      var element = $("." + this.selectFieldOrder[i]);
      if(disabled){
        element.html("<option value='"+callerValue+"'>"+callerValue+"</option>");
        disableFlag = true;
      }
      else if(indexOfSelect != i)
        element.html("<option value=''>Waiting for selection</option>");
      element.attr("disabled", disabled);
    }
  },

  addOptions: function (element, data, callerValue) {
    element.options.length = 0;
    var firstOptionHTML = (data.length > 0) ? (element.getAttribute('geo-default-option-HTML') || 'Select') : callerValue;
    element.options[element.options.length] = new Option(firstOptionHTML, element.getAttribute('geo-default-option-value') || '');
    for(var i = 0; i < data.length; i++){
      element.options[element.options.length] = new Option(data[i][0], data[i][0])
      element.options[element.options.length-1].setAttribute('geo-code', data[i][1]);
    }
    this.childDisabler(element, callerValue);
  },

  readCountries: function (element, variableName) {
    var evalString = (variableName == "sort") ? "window.geoSelect.unSort.sort()" : "window.geoSelect.unSort";
    this.addOptions(element, eval(evalString), "");
  },

  setCountryList: function (element) {
    var variableName = (element.getAttribute('geo-sort') != undefined && element.getAttribute('geo-sort').toUpperCase() == 'CONTINENT') ? 'unSort' : 'sort';
    this.readCountries(element, variableName);
  },

  listChildren: function (element) {
    var elementsClass = null;
    var selectedOption = element.options[element.selectedIndex];
    var classValue = selectedOption.parentElement.getAttribute('class');
    if (classValue == "geo-countries")
      elementsClass = "geo-states";
    else if (classValue == "geo-states")
      elementsClass = "geo-regions";
    else if(classValue == "geo-regions")
      elementsClass = "geo-cities";
    var startEvent = new CustomEvent('geoLoadingStart');
    document.dispatchEvent(startEvent);
    var endEvent = new CustomEvent('geoLoadingEnd');
    $.getJSON("http://www.geonames.org/childrenJSON?geonameId=" + selectedOption.getAttribute('geo-code'), function(data){
      var optionsData = data["geonames"] ? data["geonames"].map(window.geoSelect.wipeData).sort() : [];
      $("." + elementsClass).each(function () {
        window.geoSelect.addOptions(this, optionsData, element.value);
      });
      document.dispatchEvent(endEvent);
    });
  }
};
